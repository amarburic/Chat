import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketTimeoutException;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;


class ButtonFrame extends JFrame
{
	JButton bChange ; // reference to the button object
	JTextField input;
	JTextArea output;
	// constructor for ButtonFrame
	ButtonFrame(String title) 
	{
		super( title );                     // invoke the JFrame constructor
		setLayout( new BoxLayout( getContentPane(), BoxLayout.Y_AXIS) );      // set the layout manager

		bChange = new JButton("Send!"); // construct a JButton
		input = new JTextField("", 20);
		
		output = new JTextArea(20, 20);
		output.setEditable(false);
		add(output);
		JPanel panel = new JPanel();
		panel.setLayout(new BoxLayout( panel, BoxLayout.X_AXIS) );
		panel.add(input);
		panel.add(bChange);
		add(panel);  
		// add the button to the JFrame
		setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );  
		bChange.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent ev) {
				ChatClient.hasMessage = true;
				ChatClient.message = input.getText();
				receive(input.getText());
				input.setText("");
			}
		});
		
		input.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent ev) {
				ChatClient.hasMessage = true;
				ChatClient.message = input.getText();
				receive(input.getText());
				input.setText("");
			}
		});
	}
	
	public void receive(String message) {
		output.append("\n" + message);
	}

}

public class ChatClient {
	public static boolean hasMessage = false;
	public static String message;
	public static void main(String args[]) throws Exception
	{
		byte[] sendData = new byte[1024];
		DatagramSocket clientSocket = new DatagramSocket(9876);
		InetAddress IPAddress = InetAddress.getByName("localhost");
		sendData = "test".getBytes();
		DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9878);
		clientSocket.send(sendPacket);
		
		/*ButtonFrame frm = new ButtonFrame("Button Demo");

		frm.pack();
		frm.setVisible( true ); 
		while(true) {
			DatagramSocket clientSocket = new DatagramSocket();
			InetAddress IPAddress = InetAddress.getByName("146.255.148.57");
			byte[] sendData = new byte[1024];
			byte[] receiveData = new byte[1024];
			if(hasMessage) {
				sendData = message.getBytes();
				DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);
				clientSocket.send(sendPacket);
				hasMessage = false;
			}
			boolean timedOut = false;
			clientSocket.setSoTimeout(1000);
			
			DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
			try {
				clientSocket.receive(receivePacket);
			} catch(SocketTimeoutException ste) {
				timedOut = true;
				//System.out.println("timed out");
			}
			if(!timedOut) {
				String modifiedSentence = new String(receivePacket.getData());
				frm.receive("SERVER:" + modifiedSentence);
			}
			clientSocket.close();
		}
		*/
	}
}
