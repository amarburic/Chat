import java.net.SocketException;
import java.util.ArrayList;

import statics.Values;
import view.GUI;

public class ChatServer {

	private ArrayList<String> receivedMessages;
	private Connector connector; 
	private Receiver receiver; 
	private Broadcaster broadcaster;
	
	public ChatServer() throws SocketException {
		receivedMessages = new ArrayList<String>();
		connector = new Connector(Values.SERVER_CONNECT_PORT);
		broadcaster = new Broadcaster(Values.SERVER_BROADCAST_PORT);
		receiver = new Receiver(Values.SERVER_RECEIVE_PORT, broadcaster, connector, receivedMessages);
	}
	
	public void run() {
		(new Thread(connector)).start();
		(new Thread(receiver)).start();
		
	}
	
	public static void main(String[] args) throws Exception {
		GUI frm = new GUI("Button Demo");

		frm.pack();    
		frm.setVisible( true ); 
		(new ChatServer()).run();
		
		/*
		serverSocket = new DatagramSocket(port);
		byte[] receiveData = new byte[1024];
		byte[] sendData = new byte[1024];
		while(true)
		{
			System.out.println("state: " + state);
			if(ChatServer.state) {
				boolean timedOut = false;
				Arrays.fill( receiveData, (byte) 0 );
				DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
				try {
					serverSocket.setSoTimeout(1000);
				} catch (SocketException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				try {
					serverSocket.receive(receivePacket);
				} catch(SocketTimeoutException ste) {
					timedOut = true;
					System.out.println("timed out");
				}
				if(!timedOut) {
					String sentence = new String( receivePacket.getData());
					System.out.println("RECEIVED: " + sentence);
					InetAddress IPAddress = receivePacket.getAddress();
					int port = receivePacket.getPort();
					String capitalizedSentence = sentence.toUpperCase();
					frm.receive(sentence);
					sendData = capitalizedSentence.getBytes();
					DatagramPacket sendPacket =
							new DatagramPacket(sendData, sendData.length, IPAddress, port);
					serverSocket.send(sendPacket);
				}
				if(turnOff) {
					ChatServer.serverSocket.close();
					turnOff = false;
					state = false;
				}
			} else {
				if(turnOn) {
					serverSocket = new DatagramSocket(port);
					turnOn = false;
					state = true;
				}
			}
			
		}
		*/
	}


}


